'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSMitarbeiter
    Inherits DataSet
    
    Private tableMitarbeiter As MitarbeiterDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Mitarbeiter")) Is Nothing) Then
                Me.Tables.Add(New MitarbeiterDataTable(ds.Tables("Mitarbeiter")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Mitarbeiter As MitarbeiterDataTable
        Get
            Return Me.tableMitarbeiter
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSMitarbeiter = CType(MyBase.Clone,DSMitarbeiter)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Mitarbeiter")) Is Nothing) Then
            Me.Tables.Add(New MitarbeiterDataTable(ds.Tables("Mitarbeiter")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMitarbeiter = CType(Me.Tables("Mitarbeiter"),MitarbeiterDataTable)
        If (Not (Me.tableMitarbeiter) Is Nothing) Then
            Me.tableMitarbeiter.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSMitarbeiter"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSMitarbeiter.xsd"
        Me.Locale = New System.Globalization.CultureInfo("de-DE")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMitarbeiter = New MitarbeiterDataTable
        Me.Tables.Add(Me.tableMitarbeiter)
    End Sub
    
    Private Function ShouldSerializeMitarbeiter() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MitarbeiterRowChangeEventHandler(ByVal sender As Object, ByVal e As MitarbeiterRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MitarbeiterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMitarbeiter As DataColumn
        
        Private columnNachname As DataColumn
        
        Private columnOrt As DataColumn
        
        Private columnPersonalNr As DataColumn
        
        Private columnPLZ As DataColumn
        
        Private columnStraße As DataColumn
        
        Private columnVorname As DataColumn
        
        Friend Sub New()
            MyBase.New("Mitarbeiter")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMitarbeiterColumn As DataColumn
            Get
                Return Me.columnIDMitarbeiter
            End Get
        End Property
        
        Friend ReadOnly Property NachnameColumn As DataColumn
            Get
                Return Me.columnNachname
            End Get
        End Property
        
        Friend ReadOnly Property OrtColumn As DataColumn
            Get
                Return Me.columnOrt
            End Get
        End Property
        
        Friend ReadOnly Property PersonalNrColumn As DataColumn
            Get
                Return Me.columnPersonalNr
            End Get
        End Property
        
        Friend ReadOnly Property PLZColumn As DataColumn
            Get
                Return Me.columnPLZ
            End Get
        End Property
        
        Friend ReadOnly Property StraßeColumn As DataColumn
            Get
                Return Me.columnStraße
            End Get
        End Property
        
        Friend ReadOnly Property VornameColumn As DataColumn
            Get
                Return Me.columnVorname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MitarbeiterRow
            Get
                Return CType(Me.Rows(index),MitarbeiterRow)
            End Get
        End Property
        
        Public Event MitarbeiterRowChanged As MitarbeiterRowChangeEventHandler
        
        Public Event MitarbeiterRowChanging As MitarbeiterRowChangeEventHandler
        
        Public Event MitarbeiterRowDeleted As MitarbeiterRowChangeEventHandler
        
        Public Event MitarbeiterRowDeleting As MitarbeiterRowChangeEventHandler
        
        Public Overloads Sub AddMitarbeiterRow(ByVal row As MitarbeiterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMitarbeiterRow(ByVal Nachname As String, ByVal Ort As String, ByVal PersonalNr As Integer, ByVal PLZ As String, ByVal Straße As String, ByVal Vorname As String) As MitarbeiterRow
            Dim rowMitarbeiterRow As MitarbeiterRow = CType(Me.NewRow,MitarbeiterRow)
            rowMitarbeiterRow.ItemArray = New Object() {Nothing, Nachname, Ort, PersonalNr, PLZ, Straße, Vorname}
            Me.Rows.Add(rowMitarbeiterRow)
            Return rowMitarbeiterRow
        End Function
        
        Public Function FindByIDMitarbeiter(ByVal IDMitarbeiter As Integer) As MitarbeiterRow
            Return CType(Me.Rows.Find(New Object() {IDMitarbeiter}),MitarbeiterRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MitarbeiterDataTable = CType(MyBase.Clone,MitarbeiterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MitarbeiterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMitarbeiter = Me.Columns("IDMitarbeiter")
            Me.columnNachname = Me.Columns("Nachname")
            Me.columnOrt = Me.Columns("Ort")
            Me.columnPersonalNr = Me.Columns("PersonalNr")
            Me.columnPLZ = Me.Columns("PLZ")
            Me.columnStraße = Me.Columns("Straße")
            Me.columnVorname = Me.Columns("Vorname")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMitarbeiter = New DataColumn("IDMitarbeiter", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMitarbeiter)
            Me.columnNachname = New DataColumn("Nachname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNachname)
            Me.columnOrt = New DataColumn("Ort", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrt)
            Me.columnPersonalNr = New DataColumn("PersonalNr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPersonalNr)
            Me.columnPLZ = New DataColumn("PLZ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPLZ)
            Me.columnStraße = New DataColumn("Straße", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStraße)
            Me.columnVorname = New DataColumn("Vorname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVorname)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDMitarbeiter}, true))
            Me.columnIDMitarbeiter.AutoIncrement = true
            Me.columnIDMitarbeiter.AllowDBNull = false
            Me.columnIDMitarbeiter.Unique = true
        End Sub
        
        Public Function NewMitarbeiterRow() As MitarbeiterRow
            Return CType(Me.NewRow,MitarbeiterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MitarbeiterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MitarbeiterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MitarbeiterRowChangedEvent) Is Nothing) Then
                RaiseEvent MitarbeiterRowChanged(Me, New MitarbeiterRowChangeEvent(CType(e.Row,MitarbeiterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MitarbeiterRowChangingEvent) Is Nothing) Then
                RaiseEvent MitarbeiterRowChanging(Me, New MitarbeiterRowChangeEvent(CType(e.Row,MitarbeiterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MitarbeiterRowDeletedEvent) Is Nothing) Then
                RaiseEvent MitarbeiterRowDeleted(Me, New MitarbeiterRowChangeEvent(CType(e.Row,MitarbeiterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MitarbeiterRowDeletingEvent) Is Nothing) Then
                RaiseEvent MitarbeiterRowDeleting(Me, New MitarbeiterRowChangeEvent(CType(e.Row,MitarbeiterRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMitarbeiterRow(ByVal row As MitarbeiterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MitarbeiterRow
        Inherits DataRow
        
        Private tableMitarbeiter As MitarbeiterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMitarbeiter = CType(Me.Table,MitarbeiterDataTable)
        End Sub
        
        Public Property IDMitarbeiter As Integer
            Get
                Return CType(Me(Me.tableMitarbeiter.IDMitarbeiterColumn),Integer)
            End Get
            Set
                Me(Me.tableMitarbeiter.IDMitarbeiterColumn) = value
            End Set
        End Property
        
        Public Property Nachname As String
            Get
                Try 
                    Return CType(Me(Me.tableMitarbeiter.NachnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMitarbeiter.NachnameColumn) = value
            End Set
        End Property
        
        Public Property Ort As String
            Get
                Try 
                    Return CType(Me(Me.tableMitarbeiter.OrtColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMitarbeiter.OrtColumn) = value
            End Set
        End Property
        
        Public Property PersonalNr As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMitarbeiter.PersonalNrColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMitarbeiter.PersonalNrColumn) = value
            End Set
        End Property
        
        Public Property PLZ As String
            Get
                Try 
                    Return CType(Me(Me.tableMitarbeiter.PLZColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMitarbeiter.PLZColumn) = value
            End Set
        End Property
        
        Public Property Straße As String
            Get
                Try 
                    Return CType(Me(Me.tableMitarbeiter.StraßeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMitarbeiter.StraßeColumn) = value
            End Set
        End Property
        
        Public Property Vorname As String
            Get
                Try 
                    Return CType(Me(Me.tableMitarbeiter.VornameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMitarbeiter.VornameColumn) = value
            End Set
        End Property
        
        Public Function IsNachnameNull() As Boolean
            Return Me.IsNull(Me.tableMitarbeiter.NachnameColumn)
        End Function
        
        Public Sub SetNachnameNull()
            Me(Me.tableMitarbeiter.NachnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrtNull() As Boolean
            Return Me.IsNull(Me.tableMitarbeiter.OrtColumn)
        End Function
        
        Public Sub SetOrtNull()
            Me(Me.tableMitarbeiter.OrtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPersonalNrNull() As Boolean
            Return Me.IsNull(Me.tableMitarbeiter.PersonalNrColumn)
        End Function
        
        Public Sub SetPersonalNrNull()
            Me(Me.tableMitarbeiter.PersonalNrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPLZNull() As Boolean
            Return Me.IsNull(Me.tableMitarbeiter.PLZColumn)
        End Function
        
        Public Sub SetPLZNull()
            Me(Me.tableMitarbeiter.PLZColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStraßeNull() As Boolean
            Return Me.IsNull(Me.tableMitarbeiter.StraßeColumn)
        End Function
        
        Public Sub SetStraßeNull()
            Me(Me.tableMitarbeiter.StraßeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVornameNull() As Boolean
            Return Me.IsNull(Me.tableMitarbeiter.VornameColumn)
        End Function
        
        Public Sub SetVornameNull()
            Me(Me.tableMitarbeiter.VornameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MitarbeiterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MitarbeiterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MitarbeiterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MitarbeiterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
