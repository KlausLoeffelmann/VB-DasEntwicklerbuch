'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSMaschinen
    Inherits DataSet
    
    Private tableMaschinen As MaschinenDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Maschinen")) Is Nothing) Then
                Me.Tables.Add(New MaschinenDataTable(ds.Tables("Maschinen")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Maschinen As MaschinenDataTable
        Get
            Return Me.tableMaschinen
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSMaschinen = CType(MyBase.Clone,DSMaschinen)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Maschinen")) Is Nothing) Then
            Me.Tables.Add(New MaschinenDataTable(ds.Tables("Maschinen")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMaschinen = CType(Me.Tables("Maschinen"),MaschinenDataTable)
        If (Not (Me.tableMaschinen) Is Nothing) Then
            Me.tableMaschinen.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSMaschinen"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSMaschinen.xsd"
        Me.Locale = New System.Globalization.CultureInfo("de-DE")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMaschinen = New MaschinenDataTable
        Me.Tables.Add(Me.tableMaschinen)
    End Sub
    
    Private Function ShouldSerializeMaschinen() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MaschinenRowChangeEventHandler(ByVal sender As Object, ByVal e As MaschinenRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MaschinenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBeschreibung As DataColumn
        
        Private columnIDMaschinen As DataColumn
        
        Private columnStandort As DataColumn
        
        Private columnTypbezeichnung As DataColumn
        
        Private columnWartungNötig As DataColumn
        
        Friend Sub New()
            MyBase.New("Maschinen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BeschreibungColumn As DataColumn
            Get
                Return Me.columnBeschreibung
            End Get
        End Property
        
        Friend ReadOnly Property IDMaschinenColumn As DataColumn
            Get
                Return Me.columnIDMaschinen
            End Get
        End Property
        
        Friend ReadOnly Property StandortColumn As DataColumn
            Get
                Return Me.columnStandort
            End Get
        End Property
        
        Friend ReadOnly Property TypbezeichnungColumn As DataColumn
            Get
                Return Me.columnTypbezeichnung
            End Get
        End Property
        
        Friend ReadOnly Property WartungNötigColumn As DataColumn
            Get
                Return Me.columnWartungNötig
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MaschinenRow
            Get
                Return CType(Me.Rows(index),MaschinenRow)
            End Get
        End Property
        
        Public Event MaschinenRowChanged As MaschinenRowChangeEventHandler
        
        Public Event MaschinenRowChanging As MaschinenRowChangeEventHandler
        
        Public Event MaschinenRowDeleted As MaschinenRowChangeEventHandler
        
        Public Event MaschinenRowDeleting As MaschinenRowChangeEventHandler
        
        Public Overloads Sub AddMaschinenRow(ByVal row As MaschinenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMaschinenRow(ByVal Beschreibung As String, ByVal Standort As String, ByVal Typbezeichnung As String, ByVal WartungNötig As Boolean) As MaschinenRow
            Dim rowMaschinenRow As MaschinenRow = CType(Me.NewRow,MaschinenRow)
            rowMaschinenRow.ItemArray = New Object() {Beschreibung, Nothing, Standort, Typbezeichnung, WartungNötig}
            Me.Rows.Add(rowMaschinenRow)
            Return rowMaschinenRow
        End Function
        
        Public Function FindByIDMaschinen(ByVal IDMaschinen As Integer) As MaschinenRow
            Return CType(Me.Rows.Find(New Object() {IDMaschinen}),MaschinenRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MaschinenDataTable = CType(MyBase.Clone,MaschinenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MaschinenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBeschreibung = Me.Columns("Beschreibung")
            Me.columnIDMaschinen = Me.Columns("IDMaschinen")
            Me.columnStandort = Me.Columns("Standort")
            Me.columnTypbezeichnung = Me.Columns("Typbezeichnung")
            Me.columnWartungNötig = Me.Columns("WartungNötig")
        End Sub
        
        Private Sub InitClass()
            Me.columnBeschreibung = New DataColumn("Beschreibung", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBeschreibung)
            Me.columnIDMaschinen = New DataColumn("IDMaschinen", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMaschinen)
            Me.columnStandort = New DataColumn("Standort", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStandort)
            Me.columnTypbezeichnung = New DataColumn("Typbezeichnung", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypbezeichnung)
            Me.columnWartungNötig = New DataColumn("WartungNötig", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWartungNötig)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDMaschinen}, true))
            Me.columnIDMaschinen.AutoIncrement = true
            Me.columnIDMaschinen.AllowDBNull = false
            Me.columnIDMaschinen.Unique = true
        End Sub
        
        Public Function NewMaschinenRow() As MaschinenRow
            Return CType(Me.NewRow,MaschinenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MaschinenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MaschinenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MaschinenRowChangedEvent) Is Nothing) Then
                RaiseEvent MaschinenRowChanged(Me, New MaschinenRowChangeEvent(CType(e.Row,MaschinenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MaschinenRowChangingEvent) Is Nothing) Then
                RaiseEvent MaschinenRowChanging(Me, New MaschinenRowChangeEvent(CType(e.Row,MaschinenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MaschinenRowDeletedEvent) Is Nothing) Then
                RaiseEvent MaschinenRowDeleted(Me, New MaschinenRowChangeEvent(CType(e.Row,MaschinenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MaschinenRowDeletingEvent) Is Nothing) Then
                RaiseEvent MaschinenRowDeleting(Me, New MaschinenRowChangeEvent(CType(e.Row,MaschinenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMaschinenRow(ByVal row As MaschinenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MaschinenRow
        Inherits DataRow
        
        Private tableMaschinen As MaschinenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMaschinen = CType(Me.Table,MaschinenDataTable)
        End Sub
        
        Public Property Beschreibung As String
            Get
                Try 
                    Return CType(Me(Me.tableMaschinen.BeschreibungColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaschinen.BeschreibungColumn) = value
            End Set
        End Property
        
        Public Property IDMaschinen As Integer
            Get
                Return CType(Me(Me.tableMaschinen.IDMaschinenColumn),Integer)
            End Get
            Set
                Me(Me.tableMaschinen.IDMaschinenColumn) = value
            End Set
        End Property
        
        Public Property Standort As String
            Get
                Try 
                    Return CType(Me(Me.tableMaschinen.StandortColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaschinen.StandortColumn) = value
            End Set
        End Property
        
        Public Property Typbezeichnung As String
            Get
                Try 
                    Return CType(Me(Me.tableMaschinen.TypbezeichnungColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaschinen.TypbezeichnungColumn) = value
            End Set
        End Property
        
        Public Property WartungNötig As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMaschinen.WartungNötigColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaschinen.WartungNötigColumn) = value
            End Set
        End Property
        
        Public Function IsBeschreibungNull() As Boolean
            Return Me.IsNull(Me.tableMaschinen.BeschreibungColumn)
        End Function
        
        Public Sub SetBeschreibungNull()
            Me(Me.tableMaschinen.BeschreibungColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStandortNull() As Boolean
            Return Me.IsNull(Me.tableMaschinen.StandortColumn)
        End Function
        
        Public Sub SetStandortNull()
            Me(Me.tableMaschinen.StandortColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypbezeichnungNull() As Boolean
            Return Me.IsNull(Me.tableMaschinen.TypbezeichnungColumn)
        End Function
        
        Public Sub SetTypbezeichnungNull()
            Me(Me.tableMaschinen.TypbezeichnungColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWartungNötigNull() As Boolean
            Return Me.IsNull(Me.tableMaschinen.WartungNötigColumn)
        End Function
        
        Public Sub SetWartungNötigNull()
            Me(Me.tableMaschinen.WartungNötigColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MaschinenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MaschinenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MaschinenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MaschinenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
