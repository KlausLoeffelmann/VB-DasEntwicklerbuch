'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DSZeiten
    Inherits DataSet
    
    Private tableZeiten As ZeitenDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Zeiten")) Is Nothing) Then
                Me.Tables.Add(New ZeitenDataTable(ds.Tables("Zeiten")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Zeiten As ZeitenDataTable
        Get
            Return Me.tableZeiten
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DSZeiten = CType(MyBase.Clone,DSZeiten)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Zeiten")) Is Nothing) Then
            Me.Tables.Add(New ZeitenDataTable(ds.Tables("Zeiten")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableZeiten = CType(Me.Tables("Zeiten"),ZeitenDataTable)
        If (Not (Me.tableZeiten) Is Nothing) Then
            Me.tableZeiten.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DSZeiten"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DSZeiten.xsd"
        Me.Locale = New System.Globalization.CultureInfo("de-DE")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableZeiten = New ZeitenDataTable
        Me.Tables.Add(Me.tableZeiten)
    End Sub
    
    Private Function ShouldSerializeZeiten() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ZeitenRowChangeEventHandler(ByVal sender As Object, ByVal e As ZeitenRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ZeitenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBuchungsdatum As DataColumn
        
        Private columnDauer As DataColumn
        
        Private columnEndZeit As DataColumn
        
        Private columnIDMaschinen As DataColumn
        
        Private columnIDMitarbeiter As DataColumn
        
        Private columnIDZeiten As DataColumn
        
        Private columnStartZeit As DataColumn
        
        Friend Sub New()
            MyBase.New("Zeiten")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BuchungsdatumColumn As DataColumn
            Get
                Return Me.columnBuchungsdatum
            End Get
        End Property
        
        Friend ReadOnly Property DauerColumn As DataColumn
            Get
                Return Me.columnDauer
            End Get
        End Property
        
        Friend ReadOnly Property EndZeitColumn As DataColumn
            Get
                Return Me.columnEndZeit
            End Get
        End Property
        
        Friend ReadOnly Property IDMaschinenColumn As DataColumn
            Get
                Return Me.columnIDMaschinen
            End Get
        End Property
        
        Friend ReadOnly Property IDMitarbeiterColumn As DataColumn
            Get
                Return Me.columnIDMitarbeiter
            End Get
        End Property
        
        Friend ReadOnly Property IDZeitenColumn As DataColumn
            Get
                Return Me.columnIDZeiten
            End Get
        End Property
        
        Friend ReadOnly Property StartZeitColumn As DataColumn
            Get
                Return Me.columnStartZeit
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZeitenRow
            Get
                Return CType(Me.Rows(index),ZeitenRow)
            End Get
        End Property
        
        Public Event ZeitenRowChanged As ZeitenRowChangeEventHandler
        
        Public Event ZeitenRowChanging As ZeitenRowChangeEventHandler
        
        Public Event ZeitenRowDeleted As ZeitenRowChangeEventHandler
        
        Public Event ZeitenRowDeleting As ZeitenRowChangeEventHandler
        
        Public Overloads Sub AddZeitenRow(ByVal row As ZeitenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddZeitenRow(ByVal Buchungsdatum As Date, ByVal Dauer As Integer, ByVal EndZeit As Date, ByVal IDMaschinen As Integer, ByVal IDMitarbeiter As Integer, ByVal StartZeit As Date) As ZeitenRow
            Dim rowZeitenRow As ZeitenRow = CType(Me.NewRow,ZeitenRow)
            rowZeitenRow.ItemArray = New Object() {Buchungsdatum, Dauer, EndZeit, IDMaschinen, IDMitarbeiter, Nothing, StartZeit}
            Me.Rows.Add(rowZeitenRow)
            Return rowZeitenRow
        End Function
        
        Public Function FindByIDZeiten(ByVal IDZeiten As Integer) As ZeitenRow
            Return CType(Me.Rows.Find(New Object() {IDZeiten}),ZeitenRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ZeitenDataTable = CType(MyBase.Clone,ZeitenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ZeitenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBuchungsdatum = Me.Columns("Buchungsdatum")
            Me.columnDauer = Me.Columns("Dauer")
            Me.columnEndZeit = Me.Columns("EndZeit")
            Me.columnIDMaschinen = Me.Columns("IDMaschinen")
            Me.columnIDMitarbeiter = Me.Columns("IDMitarbeiter")
            Me.columnIDZeiten = Me.Columns("IDZeiten")
            Me.columnStartZeit = Me.Columns("StartZeit")
        End Sub
        
        Private Sub InitClass()
            Me.columnBuchungsdatum = New DataColumn("Buchungsdatum", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuchungsdatum)
            Me.columnDauer = New DataColumn("Dauer", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDauer)
            Me.columnEndZeit = New DataColumn("EndZeit", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndZeit)
            Me.columnIDMaschinen = New DataColumn("IDMaschinen", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMaschinen)
            Me.columnIDMitarbeiter = New DataColumn("IDMitarbeiter", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMitarbeiter)
            Me.columnIDZeiten = New DataColumn("IDZeiten", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDZeiten)
            Me.columnStartZeit = New DataColumn("StartZeit", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartZeit)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDZeiten}, true))
            Me.columnIDZeiten.AutoIncrement = true
            Me.columnIDZeiten.AllowDBNull = false
            Me.columnIDZeiten.Unique = true
        End Sub
        
        Public Function NewZeitenRow() As ZeitenRow
            Return CType(Me.NewRow,ZeitenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ZeitenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ZeitenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZeitenRowChangedEvent) Is Nothing) Then
                RaiseEvent ZeitenRowChanged(Me, New ZeitenRowChangeEvent(CType(e.Row,ZeitenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZeitenRowChangingEvent) Is Nothing) Then
                RaiseEvent ZeitenRowChanging(Me, New ZeitenRowChangeEvent(CType(e.Row,ZeitenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZeitenRowDeletedEvent) Is Nothing) Then
                RaiseEvent ZeitenRowDeleted(Me, New ZeitenRowChangeEvent(CType(e.Row,ZeitenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZeitenRowDeletingEvent) Is Nothing) Then
                RaiseEvent ZeitenRowDeleting(Me, New ZeitenRowChangeEvent(CType(e.Row,ZeitenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveZeitenRow(ByVal row As ZeitenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ZeitenRow
        Inherits DataRow
        
        Private tableZeiten As ZeitenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableZeiten = CType(Me.Table,ZeitenDataTable)
        End Sub
        
        Public Property Buchungsdatum As Date
            Get
                Try 
                    Return CType(Me(Me.tableZeiten.BuchungsdatumColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeiten.BuchungsdatumColumn) = value
            End Set
        End Property
        
        Public Property Dauer As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZeiten.DauerColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeiten.DauerColumn) = value
            End Set
        End Property
        
        Public Property EndZeit As Date
            Get
                Try 
                    Return CType(Me(Me.tableZeiten.EndZeitColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeiten.EndZeitColumn) = value
            End Set
        End Property
        
        Public Property IDMaschinen As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZeiten.IDMaschinenColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeiten.IDMaschinenColumn) = value
            End Set
        End Property
        
        Public Property IDMitarbeiter As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZeiten.IDMitarbeiterColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeiten.IDMitarbeiterColumn) = value
            End Set
        End Property
        
        Public Property IDZeiten As Integer
            Get
                Return CType(Me(Me.tableZeiten.IDZeitenColumn),Integer)
            End Get
            Set
                Me(Me.tableZeiten.IDZeitenColumn) = value
            End Set
        End Property
        
        Public Property StartZeit As Date
            Get
                Try 
                    Return CType(Me(Me.tableZeiten.StartZeitColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Der Wert kann nicht ermittelt werden, da er DBNull ist.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeiten.StartZeitColumn) = value
            End Set
        End Property
        
        Public Function IsBuchungsdatumNull() As Boolean
            Return Me.IsNull(Me.tableZeiten.BuchungsdatumColumn)
        End Function
        
        Public Sub SetBuchungsdatumNull()
            Me(Me.tableZeiten.BuchungsdatumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDauerNull() As Boolean
            Return Me.IsNull(Me.tableZeiten.DauerColumn)
        End Function
        
        Public Sub SetDauerNull()
            Me(Me.tableZeiten.DauerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndZeitNull() As Boolean
            Return Me.IsNull(Me.tableZeiten.EndZeitColumn)
        End Function
        
        Public Sub SetEndZeitNull()
            Me(Me.tableZeiten.EndZeitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDMaschinenNull() As Boolean
            Return Me.IsNull(Me.tableZeiten.IDMaschinenColumn)
        End Function
        
        Public Sub SetIDMaschinenNull()
            Me(Me.tableZeiten.IDMaschinenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDMitarbeiterNull() As Boolean
            Return Me.IsNull(Me.tableZeiten.IDMitarbeiterColumn)
        End Function
        
        Public Sub SetIDMitarbeiterNull()
            Me(Me.tableZeiten.IDMitarbeiterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartZeitNull() As Boolean
            Return Me.IsNull(Me.tableZeiten.StartZeitColumn)
        End Function
        
        Public Sub SetStartZeitNull()
            Me(Me.tableZeiten.StartZeitColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ZeitenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ZeitenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ZeitenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ZeitenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
