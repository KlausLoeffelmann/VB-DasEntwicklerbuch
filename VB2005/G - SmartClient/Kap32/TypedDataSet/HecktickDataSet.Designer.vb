'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:2.0.50727.42
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("HecktickDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class HecktickDataSet
    Inherits System.Data.DataSet
    
    Private tableBerater As BeraterDataTable
    
    Private tableProjekte As ProjekteDataTable
    
    Private tableZeiten As ZeitenDataTable
    
    Private relationFK_Zeiten_Berater As System.Data.DataRelation
    
    Private relationFK_Zeiten_Projekte As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Berater")) Is Nothing) Then
                MyBase.Tables.Add(New BeraterDataTable(ds.Tables("Berater")))
            End If
            If (Not (ds.Tables("Projekte")) Is Nothing) Then
                MyBase.Tables.Add(New ProjekteDataTable(ds.Tables("Projekte")))
            End If
            If (Not (ds.Tables("Zeiten")) Is Nothing) Then
                MyBase.Tables.Add(New ZeitenDataTable(ds.Tables("Zeiten")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Berater() As BeraterDataTable
        Get
            Return Me.tableBerater
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Projekte() As ProjekteDataTable
        Get
            Return Me.tableProjekte
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Zeiten() As ZeitenDataTable
        Get
            Return Me.tableZeiten
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As HecktickDataSet = CType(MyBase.Clone,HecktickDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Berater")) Is Nothing) Then
                MyBase.Tables.Add(New BeraterDataTable(ds.Tables("Berater")))
            End If
            If (Not (ds.Tables("Projekte")) Is Nothing) Then
                MyBase.Tables.Add(New ProjekteDataTable(ds.Tables("Projekte")))
            End If
            If (Not (ds.Tables("Zeiten")) Is Nothing) Then
                MyBase.Tables.Add(New ZeitenDataTable(ds.Tables("Zeiten")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBerater = CType(MyBase.Tables("Berater"),BeraterDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBerater) Is Nothing) Then
                Me.tableBerater.InitVars
            End If
        End If
        Me.tableProjekte = CType(MyBase.Tables("Projekte"),ProjekteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProjekte) Is Nothing) Then
                Me.tableProjekte.InitVars
            End If
        End If
        Me.tableZeiten = CType(MyBase.Tables("Zeiten"),ZeitenDataTable)
        If (initTable = true) Then
            If (Not (Me.tableZeiten) Is Nothing) Then
                Me.tableZeiten.InitVars
            End If
        End If
        Me.relationFK_Zeiten_Berater = Me.Relations("FK_Zeiten_Berater")
        Me.relationFK_Zeiten_Projekte = Me.Relations("FK_Zeiten_Projekte")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "HecktickDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/HecktickDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableBerater = New BeraterDataTable
        MyBase.Tables.Add(Me.tableBerater)
        Me.tableProjekte = New ProjekteDataTable
        MyBase.Tables.Add(Me.tableProjekte)
        Me.tableZeiten = New ZeitenDataTable
        MyBase.Tables.Add(Me.tableZeiten)
        Me.relationFK_Zeiten_Berater = New System.Data.DataRelation("FK_Zeiten_Berater", New System.Data.DataColumn() {Me.tableBerater.IDBeraterColumn}, New System.Data.DataColumn() {Me.tableZeiten.IDBeraterColumn}, false)
        Me.Relations.Add(Me.relationFK_Zeiten_Berater)
        Me.relationFK_Zeiten_Projekte = New System.Data.DataRelation("FK_Zeiten_Projekte", New System.Data.DataColumn() {Me.tableProjekte.IDProjekteColumn}, New System.Data.DataColumn() {Me.tableZeiten.IDProjektColumn}, false)
        Me.Relations.Add(Me.relationFK_Zeiten_Projekte)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBerater() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProjekte() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeZeiten() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As HecktickDataSet = New HecktickDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub BeraterRowChangeEventHandler(ByVal sender As Object, ByVal e As BeraterRowChangeEvent)
    
    Public Delegate Sub ProjekteRowChangeEventHandler(ByVal sender As Object, ByVal e As ProjekteRowChangeEvent)
    
    Public Delegate Sub ZeitenRowChangeEventHandler(ByVal sender As Object, ByVal e As ZeitenRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BeraterDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDBerater As System.Data.DataColumn
        
        Private columnNachname As System.Data.DataColumn
        
        Private columnVorname As System.Data.DataColumn
        
        Private columnStraße As System.Data.DataColumn
        
        Private columnPlz As System.Data.DataColumn
        
        Private columnOrt As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Berater"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDBeraterColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDBerater
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NachnameColumn() As System.Data.DataColumn
            Get
                Return Me.columnNachname
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VornameColumn() As System.Data.DataColumn
            Get
                Return Me.columnVorname
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StraßeColumn() As System.Data.DataColumn
            Get
                Return Me.columnStraße
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlzColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlz
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrtColumn() As System.Data.DataColumn
            Get
                Return Me.columnOrt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BeraterRow
            Get
                Return CType(Me.Rows(index),BeraterRow)
            End Get
        End Property
        
        Public Event BeraterRowChanging As BeraterRowChangeEventHandler
        
        Public Event BeraterRowChanged As BeraterRowChangeEventHandler
        
        Public Event BeraterRowDeleting As BeraterRowChangeEventHandler
        
        Public Event BeraterRowDeleted As BeraterRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBeraterRow(ByVal row As BeraterRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBeraterRow(ByVal Nachname As String, ByVal Vorname As String, ByVal Straße As String, ByVal Plz As String, ByVal Ort As String) As BeraterRow
            Dim rowBeraterRow As BeraterRow = CType(Me.NewRow,BeraterRow)
            rowBeraterRow.ItemArray = New Object() {Nothing, Nachname, Vorname, Straße, Plz, Ort}
            Me.Rows.Add(rowBeraterRow)
            Return rowBeraterRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIDBerater(ByVal IDBerater As Integer) As BeraterRow
            Return CType(Me.Rows.Find(New Object() {IDBerater}),BeraterRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As BeraterDataTable = CType(MyBase.Clone,BeraterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New BeraterDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDBerater = MyBase.Columns("IDBerater")
            Me.columnNachname = MyBase.Columns("Nachname")
            Me.columnVorname = MyBase.Columns("Vorname")
            Me.columnStraße = MyBase.Columns("Straße")
            Me.columnPlz = MyBase.Columns("Plz")
            Me.columnOrt = MyBase.Columns("Ort")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDBerater = New System.Data.DataColumn("IDBerater", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDBerater)
            Me.columnNachname = New System.Data.DataColumn("Nachname", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNachname)
            Me.columnVorname = New System.Data.DataColumn("Vorname", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVorname)
            Me.columnStraße = New System.Data.DataColumn("Straße", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStraße)
            Me.columnPlz = New System.Data.DataColumn("Plz", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlz)
            Me.columnOrt = New System.Data.DataColumn("Ort", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrt)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnIDBerater}, true))
            Me.columnIDBerater.AutoIncrement = true
            Me.columnIDBerater.AllowDBNull = false
            Me.columnIDBerater.ReadOnly = true
            Me.columnIDBerater.Unique = true
            Me.columnNachname.AllowDBNull = false
            Me.columnNachname.MaxLength = 255
            Me.columnVorname.AllowDBNull = false
            Me.columnVorname.MaxLength = 255
            Me.columnStraße.AllowDBNull = false
            Me.columnStraße.MaxLength = 255
            Me.columnPlz.AllowDBNull = false
            Me.columnPlz.MaxLength = 50
            Me.columnOrt.AllowDBNull = false
            Me.columnOrt.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBeraterRow() As BeraterRow
            Return CType(Me.NewRow,BeraterRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New BeraterRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BeraterRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BeraterRowChangedEvent) Is Nothing) Then
                RaiseEvent BeraterRowChanged(Me, New BeraterRowChangeEvent(CType(e.Row,BeraterRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BeraterRowChangingEvent) Is Nothing) Then
                RaiseEvent BeraterRowChanging(Me, New BeraterRowChangeEvent(CType(e.Row,BeraterRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BeraterRowDeletedEvent) Is Nothing) Then
                RaiseEvent BeraterRowDeleted(Me, New BeraterRowChangeEvent(CType(e.Row,BeraterRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BeraterRowDeletingEvent) Is Nothing) Then
                RaiseEvent BeraterRowDeleting(Me, New BeraterRowChangeEvent(CType(e.Row,BeraterRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBeraterRow(ByVal row As BeraterRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As HecktickDataSet = New HecktickDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BeraterDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProjekteDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDProjekte As System.Data.DataColumn
        
        Private columnProjektname As System.Data.DataColumn
        
        Private columnProjektbeschreibung As System.Data.DataColumn
        
        Private columnStartzeitpunkt As System.Data.DataColumn
        
        Private columnEndzeitpunkt As System.Data.DataColumn
        
        Private columnAusführungsort As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Projekte"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDProjekteColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDProjekte
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjektnameColumn() As System.Data.DataColumn
            Get
                Return Me.columnProjektname
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjektbeschreibungColumn() As System.Data.DataColumn
            Get
                Return Me.columnProjektbeschreibung
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartzeitpunktColumn() As System.Data.DataColumn
            Get
                Return Me.columnStartzeitpunkt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndzeitpunktColumn() As System.Data.DataColumn
            Get
                Return Me.columnEndzeitpunkt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AusführungsortColumn() As System.Data.DataColumn
            Get
                Return Me.columnAusführungsort
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProjekteRow
            Get
                Return CType(Me.Rows(index),ProjekteRow)
            End Get
        End Property
        
        Public Event ProjekteRowChanging As ProjekteRowChangeEventHandler
        
        Public Event ProjekteRowChanged As ProjekteRowChangeEventHandler
        
        Public Event ProjekteRowDeleting As ProjekteRowChangeEventHandler
        
        Public Event ProjekteRowDeleted As ProjekteRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProjekteRow(ByVal row As ProjekteRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProjekteRow(ByVal Projektname As String, ByVal Projektbeschreibung As String, ByVal Startzeitpunkt As Date, ByVal Endzeitpunkt As Date, ByVal Ausführungsort As String) As ProjekteRow
            Dim rowProjekteRow As ProjekteRow = CType(Me.NewRow,ProjekteRow)
            rowProjekteRow.ItemArray = New Object() {Nothing, Projektname, Projektbeschreibung, Startzeitpunkt, Endzeitpunkt, Ausführungsort}
            Me.Rows.Add(rowProjekteRow)
            Return rowProjekteRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIDProjekte(ByVal IDProjekte As Integer) As ProjekteRow
            Return CType(Me.Rows.Find(New Object() {IDProjekte}),ProjekteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ProjekteDataTable = CType(MyBase.Clone,ProjekteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ProjekteDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDProjekte = MyBase.Columns("IDProjekte")
            Me.columnProjektname = MyBase.Columns("Projektname")
            Me.columnProjektbeschreibung = MyBase.Columns("Projektbeschreibung")
            Me.columnStartzeitpunkt = MyBase.Columns("Startzeitpunkt")
            Me.columnEndzeitpunkt = MyBase.Columns("Endzeitpunkt")
            Me.columnAusführungsort = MyBase.Columns("Ausführungsort")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDProjekte = New System.Data.DataColumn("IDProjekte", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDProjekte)
            Me.columnProjektname = New System.Data.DataColumn("Projektname", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjektname)
            Me.columnProjektbeschreibung = New System.Data.DataColumn("Projektbeschreibung", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjektbeschreibung)
            Me.columnStartzeitpunkt = New System.Data.DataColumn("Startzeitpunkt", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartzeitpunkt)
            Me.columnEndzeitpunkt = New System.Data.DataColumn("Endzeitpunkt", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndzeitpunkt)
            Me.columnAusführungsort = New System.Data.DataColumn("Ausführungsort", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAusführungsort)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnIDProjekte}, true))
            Me.columnIDProjekte.AutoIncrement = true
            Me.columnIDProjekte.AllowDBNull = false
            Me.columnIDProjekte.ReadOnly = true
            Me.columnIDProjekte.Unique = true
            Me.columnProjektname.AllowDBNull = false
            Me.columnProjektname.MaxLength = 50
            Me.columnProjektbeschreibung.MaxLength = 2000
            Me.columnStartzeitpunkt.AllowDBNull = false
            Me.columnEndzeitpunkt.AllowDBNull = false
            Me.columnAusführungsort.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProjekteRow() As ProjekteRow
            Return CType(Me.NewRow,ProjekteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ProjekteRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProjekteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProjekteRowChangedEvent) Is Nothing) Then
                RaiseEvent ProjekteRowChanged(Me, New ProjekteRowChangeEvent(CType(e.Row,ProjekteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProjekteRowChangingEvent) Is Nothing) Then
                RaiseEvent ProjekteRowChanging(Me, New ProjekteRowChangeEvent(CType(e.Row,ProjekteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProjekteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProjekteRowDeleted(Me, New ProjekteRowChangeEvent(CType(e.Row,ProjekteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProjekteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProjekteRowDeleting(Me, New ProjekteRowChangeEvent(CType(e.Row,ProjekteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProjekteRow(ByVal row As ProjekteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As HecktickDataSet = New HecktickDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProjekteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZeitenDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDZeiten As System.Data.DataColumn
        
        Private columnIDProjekt As System.Data.DataColumn
        
        Private columnIDBerater As System.Data.DataColumn
        
        Private columnStartzeit As System.Data.DataColumn
        
        Private columnEndzeit As System.Data.DataColumn
        
        Private columnArbBeschreibung As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Zeiten"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDZeitenColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDZeiten
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDProjektColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDProjekt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDBeraterColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDBerater
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartzeitColumn() As System.Data.DataColumn
            Get
                Return Me.columnStartzeit
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndzeitColumn() As System.Data.DataColumn
            Get
                Return Me.columnEndzeit
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArbBeschreibungColumn() As System.Data.DataColumn
            Get
                Return Me.columnArbBeschreibung
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZeitenRow
            Get
                Return CType(Me.Rows(index),ZeitenRow)
            End Get
        End Property
        
        Public Event ZeitenRowChanging As ZeitenRowChangeEventHandler
        
        Public Event ZeitenRowChanged As ZeitenRowChangeEventHandler
        
        Public Event ZeitenRowDeleting As ZeitenRowChangeEventHandler
        
        Public Event ZeitenRowDeleted As ZeitenRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddZeitenRow(ByVal row As ZeitenRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddZeitenRow(ByVal parentProjekteRowByFK_Zeiten_Projekte As ProjekteRow, ByVal parentBeraterRowByFK_Zeiten_Berater As BeraterRow, ByVal Startzeit As Date, ByVal Endzeit As Date, ByVal ArbBeschreibung As String) As ZeitenRow
            Dim rowZeitenRow As ZeitenRow = CType(Me.NewRow,ZeitenRow)
            rowZeitenRow.ItemArray = New Object() {Nothing, parentProjekteRowByFK_Zeiten_Projekte(0), parentBeraterRowByFK_Zeiten_Berater(0), Startzeit, Endzeit, ArbBeschreibung}
            Me.Rows.Add(rowZeitenRow)
            Return rowZeitenRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIDZeiten(ByVal IDZeiten As Integer) As ZeitenRow
            Return CType(Me.Rows.Find(New Object() {IDZeiten}),ZeitenRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ZeitenDataTable = CType(MyBase.Clone,ZeitenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ZeitenDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDZeiten = MyBase.Columns("IDZeiten")
            Me.columnIDProjekt = MyBase.Columns("IDProjekt")
            Me.columnIDBerater = MyBase.Columns("IDBerater")
            Me.columnStartzeit = MyBase.Columns("Startzeit")
            Me.columnEndzeit = MyBase.Columns("Endzeit")
            Me.columnArbBeschreibung = MyBase.Columns("ArbBeschreibung")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDZeiten = New System.Data.DataColumn("IDZeiten", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDZeiten)
            Me.columnIDProjekt = New System.Data.DataColumn("IDProjekt", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDProjekt)
            Me.columnIDBerater = New System.Data.DataColumn("IDBerater", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDBerater)
            Me.columnStartzeit = New System.Data.DataColumn("Startzeit", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartzeit)
            Me.columnEndzeit = New System.Data.DataColumn("Endzeit", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndzeit)
            Me.columnArbBeschreibung = New System.Data.DataColumn("ArbBeschreibung", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArbBeschreibung)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnIDZeiten}, true))
            Me.columnIDZeiten.AutoIncrement = true
            Me.columnIDZeiten.AllowDBNull = false
            Me.columnIDZeiten.ReadOnly = true
            Me.columnIDZeiten.Unique = true
            Me.columnIDProjekt.AllowDBNull = false
            Me.columnIDBerater.AllowDBNull = false
            Me.columnStartzeit.AllowDBNull = false
            Me.columnEndzeit.AllowDBNull = false
            Me.columnArbBeschreibung.MaxLength = 2000
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewZeitenRow() As ZeitenRow
            Return CType(Me.NewRow,ZeitenRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ZeitenRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ZeitenRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZeitenRowChangedEvent) Is Nothing) Then
                RaiseEvent ZeitenRowChanged(Me, New ZeitenRowChangeEvent(CType(e.Row,ZeitenRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZeitenRowChangingEvent) Is Nothing) Then
                RaiseEvent ZeitenRowChanging(Me, New ZeitenRowChangeEvent(CType(e.Row,ZeitenRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZeitenRowDeletedEvent) Is Nothing) Then
                RaiseEvent ZeitenRowDeleted(Me, New ZeitenRowChangeEvent(CType(e.Row,ZeitenRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZeitenRowDeletingEvent) Is Nothing) Then
                RaiseEvent ZeitenRowDeleting(Me, New ZeitenRowChangeEvent(CType(e.Row,ZeitenRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveZeitenRow(ByVal row As ZeitenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As HecktickDataSet = New HecktickDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZeitenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BeraterRow
        Inherits System.Data.DataRow
        
        Private tableBerater As BeraterDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBerater = CType(Me.Table,BeraterDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDBerater() As Integer
            Get
                Return CType(Me(Me.tableBerater.IDBeraterColumn),Integer)
            End Get
            Set
                Me(Me.tableBerater.IDBeraterColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nachname() As String
            Get
                Return CType(Me(Me.tableBerater.NachnameColumn),String)
            End Get
            Set
                Me(Me.tableBerater.NachnameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vorname() As String
            Get
                Return CType(Me(Me.tableBerater.VornameColumn),String)
            End Get
            Set
                Me(Me.tableBerater.VornameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Straße() As String
            Get
                Return CType(Me(Me.tableBerater.StraßeColumn),String)
            End Get
            Set
                Me(Me.tableBerater.StraßeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plz() As String
            Get
                Return CType(Me(Me.tableBerater.PlzColumn),String)
            End Get
            Set
                Me(Me.tableBerater.PlzColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ort() As String
            Get
                Return CType(Me(Me.tableBerater.OrtColumn),String)
            End Get
            Set
                Me(Me.tableBerater.OrtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetZeitenRows() As ZeitenRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Zeiten_Berater")),ZeitenRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProjekteRow
        Inherits System.Data.DataRow
        
        Private tableProjekte As ProjekteDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProjekte = CType(Me.Table,ProjekteDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDProjekte() As Integer
            Get
                Return CType(Me(Me.tableProjekte.IDProjekteColumn),Integer)
            End Get
            Set
                Me(Me.tableProjekte.IDProjekteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Projektname() As String
            Get
                Return CType(Me(Me.tableProjekte.ProjektnameColumn),String)
            End Get
            Set
                Me(Me.tableProjekte.ProjektnameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Projektbeschreibung() As String
            Get
                Try 
                    Return CType(Me(Me.tableProjekte.ProjektbeschreibungColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Projektbeschreibung in Tabelle Projekte ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProjekte.ProjektbeschreibungColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Startzeitpunkt() As Date
            Get
                Return CType(Me(Me.tableProjekte.StartzeitpunktColumn),Date)
            End Get
            Set
                Me(Me.tableProjekte.StartzeitpunktColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Endzeitpunkt() As Date
            Get
                Return CType(Me(Me.tableProjekte.EndzeitpunktColumn),Date)
            End Get
            Set
                Me(Me.tableProjekte.EndzeitpunktColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ausführungsort() As String
            Get
                Try 
                    Return CType(Me(Me.tableProjekte.AusführungsortColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte Ausführungsort in Tabelle Projekte ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProjekte.AusführungsortColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProjektbeschreibungNull() As Boolean
            Return Me.IsNull(Me.tableProjekte.ProjektbeschreibungColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProjektbeschreibungNull()
            Me(Me.tableProjekte.ProjektbeschreibungColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAusführungsortNull() As Boolean
            Return Me.IsNull(Me.tableProjekte.AusführungsortColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAusführungsortNull()
            Me(Me.tableProjekte.AusführungsortColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetZeitenRows() As ZeitenRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Zeiten_Projekte")),ZeitenRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ZeitenRow
        Inherits System.Data.DataRow
        
        Private tableZeiten As ZeitenDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZeiten = CType(Me.Table,ZeitenDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDZeiten() As Integer
            Get
                Return CType(Me(Me.tableZeiten.IDZeitenColumn),Integer)
            End Get
            Set
                Me(Me.tableZeiten.IDZeitenColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDProjekt() As Integer
            Get
                Return CType(Me(Me.tableZeiten.IDProjektColumn),Integer)
            End Get
            Set
                Me(Me.tableZeiten.IDProjektColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDBerater() As Integer
            Get
                Return CType(Me(Me.tableZeiten.IDBeraterColumn),Integer)
            End Get
            Set
                Me(Me.tableZeiten.IDBeraterColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Startzeit() As Date
            Get
                Return CType(Me(Me.tableZeiten.StartzeitColumn),Date)
            End Get
            Set
                Me(Me.tableZeiten.StartzeitColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Endzeit() As Date
            Get
                Return CType(Me(Me.tableZeiten.EndzeitColumn),Date)
            End Get
            Set
                Me(Me.tableZeiten.EndzeitColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ArbBeschreibung() As String
            Get
                Try 
                    Return CType(Me(Me.tableZeiten.ArbBeschreibungColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("Der Wert für Spalte ArbBeschreibung in Tabelle Zeiten ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeiten.ArbBeschreibungColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BeraterRow() As BeraterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Zeiten_Berater")),BeraterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Zeiten_Berater"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjekteRow() As ProjekteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Zeiten_Projekte")),ProjekteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Zeiten_Projekte"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArbBeschreibungNull() As Boolean
            Return Me.IsNull(Me.tableZeiten.ArbBeschreibungColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArbBeschreibungNull()
            Me(Me.tableZeiten.ArbBeschreibungColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BeraterRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As BeraterRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BeraterRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BeraterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProjekteRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ProjekteRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProjekteRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProjekteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ZeitenRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ZeitenRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ZeitenRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ZeitenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace HecktickDataSetTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BeraterTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Berater"
            tableMapping.ColumnMappings.Add("IDBerater", "IDBerater")
            tableMapping.ColumnMappings.Add("Nachname", "Nachname")
            tableMapping.ColumnMappings.Add("Vorname", "Vorname")
            tableMapping.ColumnMappings.Add("Straße", "Straße")
            tableMapping.ColumnMappings.Add("Plz", "Plz")
            tableMapping.ColumnMappings.Add("Ort", "Ort")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Berater] WHERE (([IDBerater] = @Original_IDBerater) AND ([Nach"& _ 
                "name] = @Original_Nachname) AND ([Vorname] = @Original_Vorname) AND ([Straße] = "& _ 
                "@Original_Straße) AND ([Plz] = @Original_Plz) AND ([Ort] = @Original_Ort))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDBerater", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDBerater", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Nachname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Nachname", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Vorname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Vorname", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Straße", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Straße", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Plz", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Plz", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Ort", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ort", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Berater] ([Nachname], [Vorname], [Straße], [Plz], [Ort]) VALUE"& _ 
                "S (@Nachname, @Vorname, @Straße, @Plz, @Ort);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IDBerater, Nachname, Vorna"& _ 
                "me, Straße, Plz, Ort FROM Berater WHERE (IDBerater = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Nachname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Nachname", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Vorname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Vorname", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Straße", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Straße", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Plz", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Plz", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Ort", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ort", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Berater] SET [Nachname] = @Nachname, [Vorname] = @Vorname, [Straße]"& _ 
                " = @Straße, [Plz] = @Plz, [Ort] = @Ort WHERE (([IDBerater] = @Original_IDBerater"& _ 
                ") AND ([Nachname] = @Original_Nachname) AND ([Vorname] = @Original_Vorname) AND "& _ 
                "([Straße] = @Original_Straße) AND ([Plz] = @Original_Plz) AND ([Ort] = @Original"& _ 
                "_Ort));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IDBerater, Nachname, Vorname, Straße, Plz, Ort FROM Berater WHER"& _ 
                "E (IDBerater = @IDBerater)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Nachname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Nachname", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Vorname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Vorname", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Straße", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Straße", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Plz", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Plz", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Ort", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ort", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDBerater", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDBerater", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Nachname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Nachname", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Vorname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Vorname", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Straße", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Straße", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Plz", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Plz", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Ort", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ort", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDBerater", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "IDBerater", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLExpress;Initial Catalog=Hecktick;Integrated Security=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IDBerater, Nachname, Vorname, Straße, Plz, Ort FROM dbo.Berater"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As HecktickDataSet.BeraterDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As HecktickDataSet.BeraterDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As HecktickDataSet.BeraterDataTable = New HecktickDataSet.BeraterDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As HecktickDataSet.BeraterDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As HecktickDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Berater")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDBerater As Integer, ByVal Original_Nachname As String, ByVal Original_Vorname As String, ByVal Original_Straße As String, ByVal Original_Plz As String, ByVal Original_Ort As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDBerater,Integer)
            If (Original_Nachname Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Nachname")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Nachname,String)
            End If
            If (Original_Vorname Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Vorname")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Vorname,String)
            End If
            If (Original_Straße Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Straße")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Straße,String)
            End If
            If (Original_Plz Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Plz")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Plz,String)
            End If
            If (Original_Ort Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Ort")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Ort,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Nachname As String, ByVal Vorname As String, ByVal Straße As String, ByVal Plz As String, ByVal Ort As String) As Integer
            If (Nachname Is Nothing) Then
                Throw New System.ArgumentNullException("Nachname")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Nachname,String)
            End If
            If (Vorname Is Nothing) Then
                Throw New System.ArgumentNullException("Vorname")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Vorname,String)
            End If
            If (Straße Is Nothing) Then
                Throw New System.ArgumentNullException("Straße")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Straße,String)
            End If
            If (Plz Is Nothing) Then
                Throw New System.ArgumentNullException("Plz")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Plz,String)
            End If
            If (Ort Is Nothing) Then
                Throw New System.ArgumentNullException("Ort")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Ort,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Nachname As String, ByVal Vorname As String, ByVal Straße As String, ByVal Plz As String, ByVal Ort As String, ByVal Original_IDBerater As Integer, ByVal Original_Nachname As String, ByVal Original_Vorname As String, ByVal Original_Straße As String, ByVal Original_Plz As String, ByVal Original_Ort As String, ByVal IDBerater As Integer) As Integer
            If (Nachname Is Nothing) Then
                Throw New System.ArgumentNullException("Nachname")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Nachname,String)
            End If
            If (Vorname Is Nothing) Then
                Throw New System.ArgumentNullException("Vorname")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Vorname,String)
            End If
            If (Straße Is Nothing) Then
                Throw New System.ArgumentNullException("Straße")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Straße,String)
            End If
            If (Plz Is Nothing) Then
                Throw New System.ArgumentNullException("Plz")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Plz,String)
            End If
            If (Ort Is Nothing) Then
                Throw New System.ArgumentNullException("Ort")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Ort,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IDBerater,Integer)
            If (Original_Nachname Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Nachname")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Nachname,String)
            End If
            If (Original_Vorname Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Vorname")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Vorname,String)
            End If
            If (Original_Straße Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Straße")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Straße,String)
            End If
            If (Original_Plz Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Plz")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Plz,String)
            End If
            If (Original_Ort Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Ort")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Ort,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(IDBerater,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProjekteTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Projekte"
            tableMapping.ColumnMappings.Add("IDProjekte", "IDProjekte")
            tableMapping.ColumnMappings.Add("Projektname", "Projektname")
            tableMapping.ColumnMappings.Add("Projektbeschreibung", "Projektbeschreibung")
            tableMapping.ColumnMappings.Add("Startzeitpunkt", "Startzeitpunkt")
            tableMapping.ColumnMappings.Add("Endzeitpunkt", "Endzeitpunkt")
            tableMapping.ColumnMappings.Add("Ausführungsort", "Ausführungsort")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Projekte] WHERE (([IDProjekte] = @Original_IDProjekte) AND ([P"& _ 
                "rojektname] = @Original_Projektname) AND ((@IsNull_Projektbeschreibung = 1 AND ["& _ 
                "Projektbeschreibung] IS NULL) OR ([Projektbeschreibung] = @Original_Projektbesch"& _ 
                "reibung)) AND ([Startzeitpunkt] = @Original_Startzeitpunkt) AND ([Endzeitpunkt] "& _ 
                "= @Original_Endzeitpunkt) AND ((@IsNull_Ausführungsort = 1 AND [Ausführungsort] "& _ 
                "IS NULL) OR ([Ausführungsort] = @Original_Ausführungsort)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDProjekte", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDProjekte", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Projektname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Projektname", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Projektbeschreibung", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Projektbeschreibung", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Projektbeschreibung", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Projektbeschreibung", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Startzeitpunkt", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Startzeitpunkt", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Endzeitpunkt", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Endzeitpunkt", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Ausführungsort", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Ausführungsort", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Ausführungsort", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ausführungsort", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Projekte] ([Projektname], [Projektbeschreibung], [Startzeitpun"& _ 
                "kt], [Endzeitpunkt], [Ausführungsort]) VALUES (@Projektname, @Projektbeschreibun"& _ 
                "g, @Startzeitpunkt, @Endzeitpunkt, @Ausführungsort);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IDProjekte, Projekt"& _ 
                "name, Projektbeschreibung, Startzeitpunkt, Endzeitpunkt, Ausführungsort FROM Pro"& _ 
                "jekte WHERE (IDProjekte = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Projektname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Projektname", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Projektbeschreibung", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Projektbeschreibung", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Startzeitpunkt", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Startzeitpunkt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Endzeitpunkt", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Endzeitpunkt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Ausführungsort", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ausführungsort", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Projekte] SET [Projektname] = @Projektname, [Projektbeschreibung] ="& _ 
                " @Projektbeschreibung, [Startzeitpunkt] = @Startzeitpunkt, [Endzeitpunkt] = @End"& _ 
                "zeitpunkt, [Ausführungsort] = @Ausführungsort WHERE (([IDProjekte] = @Original_I"& _ 
                "DProjekte) AND ([Projektname] = @Original_Projektname) AND ((@IsNull_Projektbesc"& _ 
                "hreibung = 1 AND [Projektbeschreibung] IS NULL) OR ([Projektbeschreibung] = @Ori"& _ 
                "ginal_Projektbeschreibung)) AND ([Startzeitpunkt] = @Original_Startzeitpunkt) AN"& _ 
                "D ([Endzeitpunkt] = @Original_Endzeitpunkt) AND ((@IsNull_Ausführungsort = 1 AND"& _ 
                " [Ausführungsort] IS NULL) OR ([Ausführungsort] = @Original_Ausführungsort)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT IDProjekte, Projektname, Projektbeschreibung, Startzeitpunkt, Endzeitpunk"& _ 
                "t, Ausführungsort FROM Projekte WHERE (IDProjekte = @IDProjekte)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Projektname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Projektname", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Projektbeschreibung", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Projektbeschreibung", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Startzeitpunkt", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Startzeitpunkt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Endzeitpunkt", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Endzeitpunkt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Ausführungsort", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ausführungsort", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDProjekte", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDProjekte", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Projektname", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Projektname", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Projektbeschreibung", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Projektbeschreibung", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Projektbeschreibung", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Projektbeschreibung", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Startzeitpunkt", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Startzeitpunkt", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Endzeitpunkt", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Endzeitpunkt", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_Ausführungsort", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Ausführungsort", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Ausführungsort", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Ausführungsort", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDProjekte", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "IDProjekte", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLExpress;Initial Catalog=Hecktick;Integrated Security=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IDProjekte, Projektname, Projektbeschreibung, Startzeitpunkt, Endzeitpunkt"& _ 
                ", Ausführungsort FROM dbo.Projekte"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As HecktickDataSet.ProjekteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As HecktickDataSet.ProjekteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As HecktickDataSet.ProjekteDataTable = New HecktickDataSet.ProjekteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As HecktickDataSet.ProjekteDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As HecktickDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Projekte")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDProjekte As Integer, ByVal Original_Projektname As String, ByVal Original_Projektbeschreibung As String, ByVal Original_Startzeitpunkt As Date, ByVal Original_Endzeitpunkt As Date, ByVal Original_Ausführungsort As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDProjekte,Integer)
            If (Original_Projektname Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Projektname")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Projektname,String)
            End If
            If (Original_Projektbeschreibung Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Projektbeschreibung,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Startzeitpunkt,Date)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Endzeitpunkt,Date)
            If (Original_Ausführungsort Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Ausführungsort,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Projektname As String, ByVal Projektbeschreibung As String, ByVal Startzeitpunkt As Date, ByVal Endzeitpunkt As Date, ByVal Ausführungsort As String) As Integer
            If (Projektname Is Nothing) Then
                Throw New System.ArgumentNullException("Projektname")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Projektname,String)
            End If
            If (Projektbeschreibung Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Projektbeschreibung,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Startzeitpunkt,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Endzeitpunkt,Date)
            If (Ausführungsort Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Ausführungsort,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Projektname As String, ByVal Projektbeschreibung As String, ByVal Startzeitpunkt As Date, ByVal Endzeitpunkt As Date, ByVal Ausführungsort As String, ByVal Original_IDProjekte As Integer, ByVal Original_Projektname As String, ByVal Original_Projektbeschreibung As String, ByVal Original_Startzeitpunkt As Date, ByVal Original_Endzeitpunkt As Date, ByVal Original_Ausführungsort As String, ByVal IDProjekte As Integer) As Integer
            If (Projektname Is Nothing) Then
                Throw New System.ArgumentNullException("Projektname")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Projektname,String)
            End If
            If (Projektbeschreibung Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Projektbeschreibung,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Startzeitpunkt,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Endzeitpunkt,Date)
            If (Ausführungsort Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Ausführungsort,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IDProjekte,Integer)
            If (Original_Projektname Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Projektname")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Projektname,String)
            End If
            If (Original_Projektbeschreibung Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Projektbeschreibung,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Startzeitpunkt,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Endzeitpunkt,Date)
            If (Original_Ausführungsort Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Ausführungsort,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(IDProjekte,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZeitenTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Zeiten"
            tableMapping.ColumnMappings.Add("IDZeiten", "IDZeiten")
            tableMapping.ColumnMappings.Add("IDProjekt", "IDProjekt")
            tableMapping.ColumnMappings.Add("IDBerater", "IDBerater")
            tableMapping.ColumnMappings.Add("Startzeit", "Startzeit")
            tableMapping.ColumnMappings.Add("Endzeit", "Endzeit")
            tableMapping.ColumnMappings.Add("ArbBeschreibung", "ArbBeschreibung")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Zeiten] WHERE (([IDZeiten] = @Original_IDZeiten) AND ([IDProje"& _ 
                "kt] = @Original_IDProjekt) AND ([IDBerater] = @Original_IDBerater) AND ([Startze"& _ 
                "it] = @Original_Startzeit) AND ([Endzeit] = @Original_Endzeit) AND ((@IsNull_Arb"& _ 
                "Beschreibung = 1 AND [ArbBeschreibung] IS NULL) OR ([ArbBeschreibung] = @Origina"& _ 
                "l_ArbBeschreibung)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDZeiten", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDZeiten", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDProjekt", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDProjekt", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDBerater", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDBerater", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Startzeit", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Startzeit", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Endzeit", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Endzeit", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ArbBeschreibung", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArbBeschreibung", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ArbBeschreibung", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ArbBeschreibung", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Zeiten] ([IDProjekt], [IDBerater], [Startzeit], [Endzeit], [Ar"& _ 
                "bBeschreibung]) VALUES (@IDProjekt, @IDBerater, @Startzeit, @Endzeit, @ArbBeschr"& _ 
                "eibung);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IDZeiten, IDProjekt, IDBerater, Startzeit, Endzeit, ArbBeschrei"& _ 
                "bung FROM Zeiten WHERE (IDZeiten = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDProjekt", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDProjekt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDBerater", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDBerater", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Startzeit", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Startzeit", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Endzeit", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Endzeit", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ArbBeschreibung", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ArbBeschreibung", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Zeiten] SET [IDProjekt] = @IDProjekt, [IDBerater] = @IDBerater, [St"& _ 
                "artzeit] = @Startzeit, [Endzeit] = @Endzeit, [ArbBeschreibung] = @ArbBeschreibun"& _ 
                "g WHERE (([IDZeiten] = @Original_IDZeiten) AND ([IDProjekt] = @Original_IDProjek"& _ 
                "t) AND ([IDBerater] = @Original_IDBerater) AND ([Startzeit] = @Original_Startzei"& _ 
                "t) AND ([Endzeit] = @Original_Endzeit) AND ((@IsNull_ArbBeschreibung = 1 AND [Ar"& _ 
                "bBeschreibung] IS NULL) OR ([ArbBeschreibung] = @Original_ArbBeschreibung)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT IDZeiten, IDProjekt, IDBerater, Startzeit, Endzeit, ArbBeschreibung FROM Z"& _ 
                "eiten WHERE (IDZeiten = @IDZeiten)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDProjekt", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDProjekt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDBerater", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDBerater", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Startzeit", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Startzeit", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Endzeit", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Endzeit", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ArbBeschreibung", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ArbBeschreibung", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDZeiten", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDZeiten", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDProjekt", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDProjekt", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_IDBerater", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDBerater", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Startzeit", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Startzeit", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Endzeit", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Endzeit", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_ArbBeschreibung", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArbBeschreibung", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_ArbBeschreibung", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ArbBeschreibung", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDZeiten", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "IDZeiten", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLExpress;Initial Catalog=Hecktick;Integrated Security=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IDZeiten, IDProjekt, IDBerater, Startzeit, Endzeit, ArbBeschreibung FROM d"& _ 
                "bo.Zeiten"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Zeiten.IDZeiten, Zeiten.IDProjekt, Zeiten.IDBerater, Zeiten.Startzeit,"& _ 
                " Zeiten.Endzeit, Zeiten.ArbBeschreibung"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Zeiten INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               Berater ON Zeiten.IDBerater = Berater.IDBerater"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Zeite"& _ 
                "n.IDProjekt = @IDProjekt) AND (Zeiten.Startzeit >= @Startzeit) AND (Zeiten.Endze"& _ 
                "it <= @Endzeit)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Berater.Nachname"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@IDProjekt", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "IDProjekt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@Startzeit", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "Startzeit", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New System.Data.SqlClient.SqlParameter("@Endzeit", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "Endzeit", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As HecktickDataSet.ZeitenDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As HecktickDataSet.ZeitenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As HecktickDataSet.ZeitenDataTable = New HecktickDataSet.ZeitenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByIDProjektUndZeitbereich(ByVal dataTable As HecktickDataSet.ZeitenDataTable, ByVal IDProjekt As Integer, ByVal Startzeit As Date, ByVal Endzeit As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDProjekt,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Startzeit,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(Endzeit,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByIDProjektUndZeitbereich(ByVal IDProjekt As Integer, ByVal Startzeit As Date, ByVal Endzeit As Date) As HecktickDataSet.ZeitenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDProjekt,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Startzeit,Date)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(Endzeit,Date)
            Dim dataTable As HecktickDataSet.ZeitenDataTable = New HecktickDataSet.ZeitenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As HecktickDataSet.ZeitenDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As HecktickDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Zeiten")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDZeiten As Integer, ByVal Original_IDProjekt As Integer, ByVal Original_IDBerater As Integer, ByVal Original_Startzeit As Date, ByVal Original_Endzeit As Date, ByVal Original_ArbBeschreibung As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDZeiten,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IDProjekt,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IDBerater,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Startzeit,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Endzeit,Date)
            If (Original_ArbBeschreibung Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ArbBeschreibung,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDProjekt As Integer, ByVal IDBerater As Integer, ByVal Startzeit As Date, ByVal Endzeit As Date, ByVal ArbBeschreibung As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDProjekt,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDBerater,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Startzeit,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Endzeit,Date)
            If (ArbBeschreibung Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ArbBeschreibung,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDProjekt As Integer, ByVal IDBerater As Integer, ByVal Startzeit As Date, ByVal Endzeit As Date, ByVal ArbBeschreibung As String, ByVal Original_IDZeiten As Integer, ByVal Original_IDProjekt As Integer, ByVal Original_IDBerater As Integer, ByVal Original_Startzeit As Date, ByVal Original_Endzeit As Date, ByVal Original_ArbBeschreibung As String, ByVal IDZeiten As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDProjekt,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDBerater,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Startzeit,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Endzeit,Date)
            If (ArbBeschreibung Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ArbBeschreibung,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IDZeiten,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_IDProjekt,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IDBerater,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Startzeit,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Endzeit,Date)
            If (Original_ArbBeschreibung Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ArbBeschreibung,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(IDZeiten,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
